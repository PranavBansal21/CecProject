apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
data:
  01_create_users.sql: |
    CREATE TABLE IF NOT EXISTS users (
      id   SERIAL PRIMARY KEY,
      name TEXT   NOT NULL,
      email TEXT  NOT NULL UNIQUE
    );
  02_create_drivers.sql: |
    CREATE TABLE IF NOT EXISTS drivers (
      id      SERIAL PRIMARY KEY,
      name    TEXT   NOT NULL,
      vehicle TEXT   NOT NULL
    );
  03_create_rides.sql: |
    CREATE TABLE IF NOT EXISTS rides (
      id SERIAL PRIMARY KEY,
      user_id INTEGER NOT NULL,
      driver_id INTEGER,
      pickup TEXT NOT NULL,
      dropoff TEXT NOT NULL,
      status TEXT NOT NULL
    );
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
type: Opaque
data:
  # These are base64 encoded values: "cab_user" and "cab_pass"
  POSTGRES_USER: Y2FiX3VzZXI=
  POSTGRES_PASSWORD: Y2FiX3Bhc3M=
  POSTGRES_DB: Y2Fi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        envFrom:
        - secretRef:
            name: postgres-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          exec:
            command: ["pg_isready", "-U", "$(POSTGRES_USER)"]
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          exec:
            command: ["pg_isready", "-U", "$(POSTGRES_USER)"]
          initialDelaySeconds: 30
          periodSeconds: 15
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP